continue
hash
hash[:category]
taxon.name
continue
ProductsInserter.create_product
continue
ProductsInserter.create_product
continue
ProductsInserter.create_product
continue
product1.master
product1.variants
continue
variant1
continue
hashes_array
continue
product
Spree::Product.first
hash
category
taxon.id
continue
taxon.id
continue
Spree::Taxon.count
taxon1
taxon2
continue
taxon1.name
.name
taxon1
Spree::Taxon.first
continue
product1
continue
Spree::Product.first.class
product1.class
continue
product1.taxons
product1.class
continue
Spree::Product.first.master.stock_items
Spree::Product.first.master
Spree::Product.first.stock_items
continue
hashed_file
continue
hashed_rows[0].keys
hashed_rows[0].keys.count
continue
hashed_rows[0].keys.count
hashed_rows[0].keys
hashed_rows
continue
hashed_rows.class
continue
hashed_rows[0].keys
hashed_rows[0]
hashed_rows[0].class
continue
hashed_rows[0].class
hashed_rows[0].keys
hashed_rows[0]
continue
hashed_rows[0]
hashed_rows[1]
hashed_rows
continue
@file
continue
@file
file
continue
Spree::Product.first
Spree::Product.last
continue
product.stock_items.first
continue
product.stock_items.first
continue
product.id
continue
product.id
continue
product.id
product.stock_items.first
continue
product.stock_items.first
continue
product.stock_items.first
product_stock_items.first
continue
product.stock_items.first
product.stock_items
continue
hashed_file
stock_total
continue
product.stock_items
product.master
product
continue
product
product.stock_items
continue
product
product.stock_items
continue
product.stock_items
continue
product
continue
p = Spree::Product.create! hashed_file
p = Spree::Product.create hashed_file
continue
hashed_file
product
continue
Spree::Product.count
Spree::Product.create! hashed_file
hashed_file
Spree::Product.create hashed_file
Spree::Product.count
continue
product
continue
product.stock_items
product.master
continue
product
continue
product.master
Spree::StockLocation.count
continue
Spree::StockLocation.count
product.master
product.stock_items
continue
product.master
product.stock_items
continue
p.save!
p.save
p = Spree::Product.new hashed_file
Spree::Product.new hashed_file
Spree::Product.new
Spree::Product.create hashed_file
Spree::Product.created hashed_file
Spree::Product.first
hashed_file
product
continue
hashed_file.delete :stock_total
hashed_file
continue
hashed_file
stock_total
products
continue
params
exit
response.template
request.class
request.location
request
response.location
response.stream
response.body_parts.class
response.body_parts
response.to_a.each { |i| p i }
response.to_a
response.get_header
response.success?
response.error?
response.class
response.size
response.url
response.headers
response.location
response.code
response.body
response
continue
response.body.match(/(\/logout)/m)
response.body.match(/(\/logout)/m)[0]
response.body.match(/(<a href=.*<a href)/m)[0]
response.body.match(/(<a href=.*\$)/m)[0]
response.body.match(/(<a href=.*$)/m)[0]
response.body.match(/(<a href=.*\Z)/m)[0]
response.body.match(/(<a href=.*Z)/m)[0]
response.body.match(/(<a href=)/m)[0]
response.body.match(/(<a href=)/)m[0]
response.body.match /(<a href=)/m[0]
response.body.match /(<a href=)/m
response.body.match /(<a href=).*/m
response.body.match /(<a href=)/m
response.body.match /(<a href=).*/
response.body.match /(<a href=).*(<a href=)/
response.body.match /(<a href=).*(<a href=)/m
response.body.match /<a href=.*/
response.body.match /<a href=/
response.body.match /\<a href="\/logout/
response.body.match /<a href="\/logout/
response.body.match /xxxxxxxxxxxxxxxxxxxxxxxxxxx/
response.body.
response.body.match /logout/
response.body.match /logout/i
response.body.class
response.body.keys
response.body.to_a
response.body.to_s
response.body.parse
response.body | grep log
response.body
response
response.code
response.headers
continue
response.headers
response.rendered
render
response.template
response.code
continue
response
request
continue
controller.current_user
current_user
